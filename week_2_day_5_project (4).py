# -*- coding: utf-8 -*-
"""Week 2 Day 5 Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CbOMvWfyss7yhx4jQ9yS8fU9ayBhIdx9
"""

readme = """
# ðŸ§¾ Contract Analyzer AI

This assistant uses OpenAI GPT-4 and LangChain to:
- Extract key sections from uploaded contracts (start date, termination, compensation, etc.)
- Identify legal red flags such as auto-renewal or one-sided liability
- Explain contracts in plain English for non-lawyers
- Answer custom legal questions like "Can I terminate early?"

### Example Use Cases:
- Upload an LLC Operating Agreement and get a breakdown
- Spot vague or risky terms automatically
- Ask targeted legal questions directly to the contract

### Files:
- contract_assistant.ipynb: Colab notebook with full logic
- requirements.txt: Python dependencies
- README.md: This file

### Run Instructions:
```bash
pip install -r requirements.txt
# Then open and run the notebook in Google Colab
"""

with open("README.md", "w") as f:
  f.write(readme)
!cat README.md  # to preview

!pip install langchain langchain-openai langchain-community openai
!pip install PyPDF2

from getpass import getpass
import os

os.environ["OPENAI_API_KEY"] = getpass("Enter your own OpenAI API Key: ")

from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import RunnableLambda

from google.colab import files
uploaded = files.upload()
filename = next(iter(uploaded))

from PyPDF2 import PdfReader
reader = PdfReader(filename)
contract_text = "\n".join([page.extract_text() for page in reader.pages])

summary_prompt = PromptTemplate.from_template("""
You are a legal assistant. Extract the following from the contract:
- Start Date
- End Date or Term
- Termination Policy
- Payment / Compensation
- Liability Clauses
- Auto-Renew Terms

Contract:
{contract}
""")

llm = ChatOpenAI(model="gpt-4")

summary_chain = summary_prompt | llm
result = summary_chain.invoke({"contract": contract_text})

print(result.content)

flag_prompt = PromptTemplate.from_template("""\n
You are a legal risk analyst. Based on this contract, identify any risks or red flags.
Look for:
- Auto-renewal clauses
- One-sided liability
- Vague termination terms
- Unclear compensation

Return a list of risks.

Contract:
{contract}
""")

risk_chain = flag_prompt | llm
risk_result = risk_chain.invoke({"contract": contract_text})

print(risk_result.content)

explain_prompt = PromptTemplate.from_template("""\n
Explain the following contract in plain English so that a non-lawyer can understand it.

Contract:
{contract}
""")

explain_chain = explain_prompt | llm
explanation = explain_chain.invoke({"contract": contract_text})

print(explanation.content)

from langchain_core.prompts import PromptTemplate

qa_prompt = PromptTemplate.from_template("""
Answer the user's question about this contract as if you were a legal assistant.

Question: {question}
Contract: {contract}
""")

qa_chain = qa_prompt | llm
question = "Can I terminate the agreement early?"
answer = qa_chain.invoke({"question": question, "contract": contract_text})
print("Answer:\n", answer.content)

## âœ… `requirements.txt` (LangChain + OpenAI)

with open("requirements.txt", "w") as f:
    f.write("openai>=1.0.0\n")
    f.write("langchain>=0.1.0\n")
    f.write("langchain-openai>=0.1.0\n")
    f.write("PyPDF2>=3.0.0\n")

!cat requirements.txt

from google.colab import files
files.download("requirements.txt")